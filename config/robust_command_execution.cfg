# Robust Command Execution Configuration
# This system replaces unreliable system() calls with robust popen() implementation
# for better reliability on embedded SBCs like Raspberry Pi and Radxa

# Command execution method
# 0 = popen() (recommended - better error handling, more reliable on SBCs)
# 1 = system() (legacy - less reliable on SBCs, may cause issues)
command_execution_method=0

# Enable/disable error handling and reporting
# 0 = disabled (no error messages)
# 1 = enabled (error messages in debug builds)
enable_error_handling=1

# Maximum command length for security (characters)
# Commands longer than this will be rejected to prevent buffer overflow attacks
# Range: 1-4096 characters
# Recommended: 1024 for most applications
max_command_length=1024

# Why This Matters:
# - system() calls can be unreliable on embedded SBCs
# - popen() provides better error handling and control
# - Input validation prevents security issues
# - Configurable execution method allows fallback if needed
# - Error handling helps with debugging and troubleshooting

# Benefits of popen() over system():
# - Better error handling (can check return values)
# - More control (can set environment variables, working directory)
# - No shell dependency (direct program execution)
# - Better security (no shell injection vulnerabilities)
# - More predictable (direct process control)
